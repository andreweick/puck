apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tailscale-apiserver
  namespace: tailscale
spec:
  selector: { matchLabels: { app: tailscale-apiserver } }
  template:
    metadata: { labels: { app: tailscale-apiserver } }
    spec:
      nodeSelector:
        kubernetes.io/hostname: puck-cp-01   # EDIT if needed
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: tailscaled
        image: tailscale/tailscale:latest
        securityContext:
          privileged: true
          capabilities: { add: ["NET_ADMIN"] }
        env:
        - name: TS_AUTHKEY
          valueFrom: { secretKeyRef: { name: ts-auth, key: TS_AUTHKEY } }
        - name: TS_HOSTNAME
          value: puck-api
        command: ["/bin/sh","-lc"]
        args: |
          tailscaled --state=kube:secret:ts-state &
          sleep 2
          tailscale up --authkey=${TS_AUTHKEY} --hostname=${TS_HOSTNAME} --reset
          tailscale serve tcp 6443 127.0.0.1:6443
          tailscale serve tcp 50000 127.0.0.1:50000
          wait
        volumeMounts:
        - { name: tun, mountPath: /dev/net/tun }
      volumes:
      - name: tun
        hostPath: { path: /dev/net/tun }
---
apiVersion: v1
kind: Secret
metadata:
  name: ts-auth
  namespace: tailscale
type: Opaque
stringData:
  TS_AUTHKEY: "tskey-REUSABLE-CHANGE-ME"  # SOPS-encrypt after edit
