apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-vip-role
rules:
  - apiGroups: [""]
    resources: ["services","endpoints","nodes"]
    verbs: ["list","get","watch","update","create","patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["list","get","watch","update","create","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-vip-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-vip-role
subjects:
  - kind: ServiceAccount
    name: kube-vip
    namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-vip-ds
  namespace: kube-system
  labels: { app.kubernetes.io/name: kube-vip }
spec:
  selector:
    matchLabels: { app.kubernetes.io/name: kube-vip }
  template:
    metadata:
      labels: { app.kubernetes.io/name: kube-vip }
    spec:
      serviceAccountName: kube-vip
      hostNetwork: true
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      containers:
      - name: kube-vip
        image: ghcr.io/kube-vip/kube-vip:latest
        args: ["manager"]
        securityContext:
          capabilities:
            add: ["NET_ADMIN","NET_RAW"]
        env:
        - name: address
          value: "10.200.10.99"    # VIP for LoadBalancer services
        - name: vip_interface
          value: "eth0"            # Interface name (check with: ip addr show)
        - name: lb_enable
          value: "true"            # Enable LoadBalancer support
        - name: lb_range
          value: "10.200.10.99-10.200.10.110"  # Range for LoadBalancer IPs
        - name: enableARP
          value: "true"
        - name: leaderElection
          value: "true"
